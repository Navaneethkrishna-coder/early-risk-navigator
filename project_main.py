# -*- coding: utf-8 -*-
"""PROJECT_MAIN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N0r4NpRNUebOh7Kwmc0ftts1NqGn5odb
"""

import pandas as pd
data=pd.read_csv('/content/cleaned_balanced_dataset.csv')
data

"""# **DATA PREPROCESSING**"""

data.info()

data.isna().sum()

data.nunique()

data.head()

data=data.drop(['GenHealth'],axis=1)

"""ENCODING USING LABEL ENCODER"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for col in ['HeartDisease','Smoking','AlcoholDrinking','Stroke','DiffWalking','Sex','AgeCategory','Race','Diabetic','PhysicalActivity','Asthma','KidneyDisease','SkinCancer']:
   data[col] = le.fit_transform(data[col])
data

y=data[['Asthma','KidneyDisease','SkinCancer','HeartDisease']]
x=data.drop(['Asthma','KidneyDisease','SkinCancer','HeartDisease'],axis=1)

"""REMOVING OUTLIERS"""

import seaborn as sns
sns.boxplot(data)

numerical_cols = ['BMI','Smoking','AlcoholDrinking','Stroke','PhysicalHealth','MentalHealth','DiffWalking','Sex','AgeCategory','Race','Diabetic','PhysicalActivity','SleepTime','Asthma','KidneyDisease','SkinCancer']

for col in numerical_cols:
  Q1 = data[col].quantile(0.25)
  Q3 = data[col].quantile(0.75)
  IQR = Q3 - Q1
  lower_bound = Q1 - 1.5 * IQR
  upper_bound = Q3 + 1.5 * IQR
  data = data[(data[col] >= lower_bound) & (data[col] <= upper_bound)]
sns.boxplot(data)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x.loc[:,['BMI','PhysicalHealth','MentalHealth','AgeCategory','SleepTime']]=sc.fit_transform(x[['BMI','PhysicalHealth','MentalHealth','AgeCategory','SleepTime']])

x

y

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import accuracy_score

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

base_model = LogisticRegression(max_iter=1000)

multi_model = MultiOutputClassifier(base_model)

multi_model.fit(X_train, y_train)

y_pred = multi_model.predict(X_test)

from sklearn.metrics import precision_score, recall_score, f1_score
for i, column in enumerate(y.columns):
    print(f"Accuracy: {column}", accuracy_score(y_test[column], y_pred[:, i]))
    print(f"Precision: {column}", precision_score(y_test[column], y_pred[:, i], average='weighted'))
    print(f"Recall: {column}", recall_score(y_test[column], y_pred[:, i], average='weighted'))
    print(f"F1 Score: {column}", f1_score(y_test[column], y_pred[:, i], average='weighted'))
    print()